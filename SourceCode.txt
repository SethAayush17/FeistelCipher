// Initialization: Jump to main program
ldi r0, 7       // Load immediate 7 into r0
shl r0, r0      // Shift left r0 (r0 = 14)
adi r0, r0, 6   // Add 6 to r0 (r0 = 20 or 0x14)
jmp r0          // Jump to instruction at address 0x14 (Main program start)

// Validation section: Reading memory locations to registers
ldi r0, 0       // Load immediate 0 into r0
ld r1, r0       // r1 <- M[0x00] (ID)
inc r0, r0      // Increment r0 to 1
ld r2, r0       // r2 <- M[0x01] (input array location)
inc r0, r0      // Increment r0 to 2
ld r3, r0       // r3 <- M[0x02] (string length)
inc r0, r0      // Increment r0 to 3
ld r4, r0       // r4 <- M[0x03] (encrypted Data Block 1)
inc r0, r0      // Increment r0 to 4
ld r5, r0       // r5 <- M[0x04] (encrypted Data Block 2)
inc r0, r0      // Increment r0 to 5
ld r6, r0       // r6 <- M[0x05] (encrypted Data Block 3, if needed)
inc r0, r0      // Increment r0 to 6
ld r7, r0       // r7 <- M[0x06] (encrypted Data Block 4, if needed)

// Validation: Infinite loop at Address 0x13
ldi r0, 0       // Load immediate 0 into r0
brz r0, 0       // Branch if r0 is zero (always true) to itself - infinite loop

// Memory configuration: Store pointers and constants for the encryption algorithm
// Load memory location 9 with the pointer to memory address 3
LDI R6 7        // Load immediate 7 into r6
ADI R6 R6 2     // Add 2 to r6 (r6 = 9)
LDI R5 3        // Load immediate 3 into r5
ST R6 R5        // Store r5 in M[r6] - M[9] = 3

// Load 0xFF0 in memory location 10 (bitmask for extracting middle 8 bits of key)
LDI R6 7        // Load immediate 7 into r6
SHL R6 R6       // Shift left (r6 = 14)
SHL R6 R6       // Shift left (r6 = 28)
SHL R6 R6       // Shift left (r6 = 56)
ADI R6 R6 7     // Add 7 (r6 = 63)
SHL R6 R6       // Shift left (r6 = 126)
SHL R6 R6       // Shift left (r6 = 252)
ADI R6 R6 3     // Add 3 (r6 = 255)
SHL R6 R6       // Shift left (r6 = 510)
SHL R6 R6       // Shift left (r6 = 1020)
SHL R6 R6       // Shift left (r6 = 2040)
SHL R6 R6       // Shift left (r6 = 4080 = 0xFF0)
LDI R7 7        // Load immediate 7 into r7
ADI R7 R7 3     // Add 3 to r7 (r7 = 10)
ST R7 R6        // Store r6 in M[r7] - M[10] = 0xFF0

// Load memory 11 with 0x00FF (bitmask for lower byte)
SHR R6 R6       // Shift right (r6 = 2040)
SHR R6 R6       // Shift right (r6 = 1020)
SHR R6 R6       // Shift right (r6 = 510)
SHR R6 R6       // Shift right (r6 = 255 = 0x00FF)
ADI R7 R7 1     // Increment r7 to 11
ST R7 R6        // Store r6 in M[r7] - M[11] = 0x00FF

// Load memory 12 with 0xFF00 (bitmask for upper byte)
SHL R6 R6       // Shift left (r6 = 510)
SHL R6 R6       // Shift left (r6 = 1020)
SHL R6 R6       // Shift left (r6 = 2040)
SHL R6 R6       // Shift left (r6 = 4080)
SHL R6 R6       // Shift left (r6 = 8160)
SHL R6 R6       // Shift left (r6 = 16320)
SHL R6 R6       // Shift left (r6 = 32640)
SHL R6 R6       // Shift left (r6 = 65280 = 0xFF00)
ADI R7 R7 1     // Increment r7 to 12
ST R7 R6        // Store r6 in M[r7] - M[12] = 0xFF00

// Load memory 13 with 0x0080 (bitmask for bit 7)
LDI R6 1        // Load immediate 1 into r6
SHL R6 R6       // Shift left (r6 = 2)
SHL R6 R6       // Shift left (r6 = 4)
SHL R6 R6       // Shift left (r6 = 8)
SHL R6 R6       // Shift left (r6 = 16)
SHL R6 R6       // Shift left (r6 = 32)
SHL R6 R6       // Shift left (r6 = 64)
SHL R6 R6       // Shift left (r6 = 128 = 0x0080)
ADI R7 R7 1     // Increment r7 to 13
ST R7 R6        // Store r6 in M[r7] - M[13] = 0x0080

// Load memory 14 with 0x0040 (bitmask for bit 6)
ADI R7 R7 1     // Increment r7 to 14
SHR R6 R6       // Shift right (r6 = 64 = 0x0040)
ST R7 R6        // Store r6 in M[r7] - M[14] = 0x0040

// Load memory 15 with 0x0020 (bitmask for bit 5)
ADI R7 R7 1     // Increment r7 to 15
SHR R6 R6       // Shift right (r6 = 32 = 0x0020)
ST R7 R6        // Store r6 in M[r7] - M[15] = 0x0020

// Load memory 16 with 0x0010 (bitmask for bit 4)
ADI R7 R7 1     // Increment r7 to 16
SHR R6 R6       // Shift right (r6 = 16 = 0x0010)
ST R7 R6        // Store r6 in M[r7] - M[16] = 0x0010

// Load memory 17 with 0x0293 (address for jump to main encryption loop)
LDI R6 7        // Load immediate 7 into r6
ADI R6 R6 1     // Add 1 to r6 (r6 = 8)
SHL R6 R6       // Shift left (r6 = 16)
SHL R6 R6       // Shift left (r6 = 32)
SHL R6 R6       // Shift left (r6 = 64)
SHL R6 R6       // Shift left (r6 = 128)
SHL R6 R6       // Shift left (r6 = 256)
ADI R6 R6 7     // Add 7 (r6 = 263)
ADI R6 R6 7     // Add 7 (r6 = 270)
ADI R6 R6 7     // Add 7 (r6 = 277)
ADI R6 R6 7     // Add 7 (r6 = 284)
ADI R6 R6 7     // Add 7 (r6 = 291)
ADI R6 R6 2     // Add 2 (r6 = 293 = 0x0125)
ADI R7 R7 1     // Increment r7 to 17
ST R7 R6        // Store r6 in M[r7] - M[17] = 0x0293

// Load memory 22 with 0x7FFF (bitmask)
LDI R6 7        // Load immediate 7 into r6
ADI R6 R6 4     // Add 4 to r6 (r6 = 11)
LD R6 R6        // Load from M[r6] (r6 = M[11] = 0x00FF)
SHL R6 R6       // Shift left (r6 = 0x01FE)
SHL R6 R6       // Shift left (r6 = 0x03FC)
SHL R6 R6       // Shift left (r6 = 0x07F8)
ADI R6 R6 7     // Add 7 (r6 = 0x07FF)
SHL R6 R6       // Shift left (r6 = 0x0FFE)
SHL R6 R6       // Shift left (r6 = 0x1FFC)
SHL R6 R6       // Shift left (r6 = 0x3FF8)
ADI R6 R6 7     // Add 7 (r6 = 0x3FFF)
SHL R6 R6       // Shift left (r6 = 0x7FFE)
ADI R6 R6 1     // Add 1 (r6 = 0x7FFF)
ADI R7 R7 5     // Add 5 to r7 (r7 = 22)
ST R7 R6        // Store r6 in M[r7] - M[22] = 0x7FFF

// Load memory 23 with 0x8000 (bitmask for highest bit)
LD R6 R7        // Load from M[r7] (r6 = M[22] = 0x7FFF)
NOT R6 R6       // Bitwise NOT (r6 = ~0x7FFF = 0x8000)
ADI R7 R7 1     // Increment r7 to 23
ST R7 R6        // Store r6 in M[r7] - M[23] = 0x8000

// Load memory 24 with KEY from the input data
ADI R7 R7 1     // Increment r7 to 24
LDI R6 1        // Load immediate 1 into r6
LD R6 R6        // Load from M[r6] (r6 = M[1] = pointer to array)
LD R6 R6        // Load from M[r6] (r6 = M[pointer] = key value)
ST R7 R6        // Store r6 in M[r7] - M[24] = KEY

// Load memory 25 with first shifted key (right circular shift)
ADI R7 R7 1     // Increment r7 to 25
LDI R5 1        // Load immediate 1 into r5
AND R5 R5 R6    // Bitwise AND r5 with r6 (check if LSB is 1)
BRZ R5 8        // Branch if r5 is zero (LSB is 0) by 8 instructions
LDI R5 7        // Load immediate 7 into r5
SHL R5 R5       // Shift left (r5 = 14)
ADI R5 R5 7     // Add 7 (r5 = 21)
ADI R5 R5 2     // Add 2 (r5 = 23)
LD R5 R5        // Load from M[r5] (r5 = M[23] = 0x8000)
LDI R4 0        // Load immediate 0 into r4
BRZ R4 2        // Branch if r4 is zero (always true) by 2 instructions
LDI R5 0        // (Skipped) Load immediate 0 into r5
SHR R6 R6       // Shift right r6 (first step of circular shift)
LDI R4 7        // Load immediate 7 into r4
SHL R4 R4       // Shift left (r4 = 14)
ADI R4 R4 7     // Add 7 (r4 = 21)
ADI R4 R4 1     // Add 1 (r4 = 22)
LD R4 R4        // Load from M[r4] (r4 = M[22] = 0x7FFF)
AND R6 R6 R4    // Bitwise AND (mask out MSB)
OR R6 R6 R5     // Bitwise OR (add MSB if it was 1)
ST R7 R6        // Store r6 in M[r7] - M[25] = first shifted key

// Load memory 26 with second shifted key
// The following sections repeat the circular shift process for keys 2-7
ADI R7 R7 1     // Increment r7 to 26
LDI R5 1        // Load immediate 1 into r5
AND R5 R5 R1    // Bitwise AND r5 with r1 (check if LSB of r1 is 1)
BRZ R5 8        // Branch if r5 is zero by 8 instructions
LDI R5 7        // Load immediate 7 into r5
SHL R5 R5       // Shift left (r5 = 14)
ADI R5 R5 7     // Add 7 (r5 = 21)
ADI R5 R5 2     // Add 2 (r5 = 23)
LD R5 R5        // Load from M[r5] (r5 = M[23] = 0x8000)
LDI R4 0        // Load immediate 0 into r4
BRZ R4 2        // Branch if r4 is zero (always true) by 2 instructions
LDI R5 0        // (Skipped) Load immediate 0 into r5
SHR R6 R6       // Shift right r6 (circular shift)
LDI R4 7        // Load immediate 7 into r4
SHL R4 R4       // Shift left (r4 = 14)
ADI R4 R4 7     // Add 7 (r4 = 21)
ADI R4 R4 1     // Add 1 (r4 = 22)
LD R4 R4        // Load from M[r4] (r4 = M[22] = 0x7FFF)
AND R6 R6 R4    // Bitwise AND (mask out MSB)
OR R6 R6 R5     // Bitwise OR (add MSB if it was 1)
ST R7 R6        // Store r6 in M[r7] - M[26] = second shifted key

// Load memory 27 with third shifted key (similar pattern repeats)
ADI R7 R7 1     // Increment r7 to 27
LDI R5 1        // Load immediate 1 into r5
AND R5 R5 R1    // Bitwise AND r5 with r1 (check if LSB of r1 is 1)
BRZ R5 8        // Branch if r5 is zero by 8 instructions
LDI R5 7        // Load immediate 7 into r5
SHL R5 R5       // Shift left (r5 = 14)
ADI R5 R5 7     // Add 7 (r5 = 21)
ADI R5 R5 2     // Add 2 (r5 = 23)
LD R5 R5        // Load from M[r5] (r5 = M[23] = 0x8000)
LDI R4 0        // Load immediate 0 into r4
BRZ R4 2        // Branch if r4 is zero (always true) by 2 instructions
LDI R5 0        // (Skipped) Load immediate 0 into r5
SHR R6 R6       // Shift right r6 (circular shift)
LDI R4 7        // Load immediate 7 into r4
SHL R4 R4       // Shift left (r4 = 14)
ADI R4 R4 7     // Add 7 (r4 = 21)
ADI R4 R4 1     // Add 1 (r4 = 22)
LD R4 R4        // Load from M[r4] (r4 = M[22] = 0x7FFF)
AND R6 R6 R4    // Bitwise AND (mask out MSB)
OR R6 R6 R5     // Bitwise OR (add MSB if it was 1)
ST R7 R6        // Store r6 in M[r7] - M[27] = third shifted key

// Load memory 28 with fourth shifted key
ADI R7 R7 1     // Increment r7 to 28
LDI R5 1        // Load immediate 1 into r5
AND R5 R5 R1    // Bitwise AND r5 with r1 (check if LSB of r1 is 1)
BRZ R5 8        // Branch if r5 is zero by 8 instructions
LDI R5 7        // Load immediate 7 into r5
SHL R5 R5       // Shift left (r5 = 14)
ADI R5 R5 7     // Add 7 (r5 = 21)
ADI R5 R5 2     // Add 2 (r5 = 23)
LD R5 R5        // Load from M[r5] (r5 = M[23] = 0x8000)
LDI R4 0        // Load immediate 0 into r4
BRZ R4 2        // Branch if r4 is zero (always true) by 2 instructions
LDI R5 0        // (Skipped) Load immediate 0 into r5
SHR R6 R6       // Shift right r6 (circular shift)
LDI R4 7        // Load immediate 7 into r4
SHL R4 R4       // Shift left (r4 = 14)
ADI R4 R4 7     // Add 7 (r4 = 21)
ADI R4 R4 1     // Add 1 (r4 = 22)
LD R4 R4        // Load from M[r4] (r4 = M[22] = 0x7FFF)
AND R6 R6 R4    // Bitwise AND (mask out MSB)
OR R6 R6 R5     // Bitwise OR (add MSB if it was 1)
ST R7 R6        // Store r6 in M[r7] - M[28] = fourth shifted key

// Load memory 29 with fifth shifted key
ADI R7 R7 1     // Increment r7 to 29
LDI R5 1        // Load immediate 1 into r5
AND R5 R5 R1    // Bitwise AND r5 with r1 (check if LSB of r1 is 1)
BRZ R5 8        // Branch if r5 is zero by 8 instructions
LDI R5 7        // Load immediate 7 into r5
SHL R5 R5       // Shift left (r5 = 14)
ADI R5 R5 7     // Add 7 (r5 = 21)
ADI R5 R5 2     // Add 2 (r5 = 23)
LD R5 R5        // Load from M[r5] (r5 = M[23] = 0x8000)
LDI R4 0        // Load immediate 0 into r4
BRZ R4 2        // Branch if r4 is zero (always true) by 2 instructions
LDI R5 0        // (Skipped) Load immediate 0 into r5
SHR R6 R6       // Shift right r6 (circular shift)
LDI R4 7        // Load immediate 7 into r4
SHL R4 R4       // Shift left (r4 = 14)
ADI R4 R4 7     // Add 7 (r4 = 21)
ADI R4 R4 1     // Add 1 (r4 = 22)
LD R4 R4        // Load from M[r4] (r4 = M[22] = 0x7FFF)
AND R6 R6 R4    // Bitwise AND (mask out MSB)
OR R6 R6 R5     // Bitwise OR (add MSB if it was 1)
ST R7 R6        // Store r6 in M[r7] - M[29] = fifth shifted key

// Load memory 30 with sixth shifted key
ADI R7 R7 1     // Increment r7 to 30
LDI R5 1        // Load immediate 1 into r5
AND R5 R5 R1    // Bitwise AND r5 with r1 (check if LSB of r1 is 1)
BRZ R5 8        // Branch if r5 is zero by 8 instructions
LDI R5 7        // Load immediate 7 into r5
SHL R5 R5       // Shift left (r5 = 14)
ADI R5 R5 7     // Add 7 (r5 = 21)
ADI R5 R5 2     // Add 2 (r5 = 23)
LD R5 R5        // Load from M[r5] (r5 = M[23] = 0x8000)
LDI R4 0        // Load immediate 0 into r4
BRZ R4 2        // Branch if r4 is zero (always true) by 2 instructions
LDI R5 0        // (Skipped) Load immediate 0 into r5
SHR R6 R6       // Shift right r6 (circular shift)
LDI R4 7        // Load immediate 7 into r4
SHL R4 R4       // Shift left (r4 = 14)
ADI R4 R4 7     // Add 7 (r4 = 21)
ADI R4 R4 1     // Add 1 (r4 = 22)
LD R4 R4        // Load from M[r4] (r4 = M[22] = 0x7FFF)
AND R6 R6 R4    // Bitwise AND (mask out MSB)
OR R6 R6 R5     // Bitwise OR (add MSB if it was 1)
ST R7 R6        // Store r6 in M[r7] - M[30] = sixth shifted key

// Load memory 31 with seventh shifted key
ADI R7 R7 1     // Increment r7 to 31
LDI R5 1        // Load immediate 1 into r5
AND R5 R5 R1    // Bitwise AND r5 with r1 (check if LSB of r1 is 1)
BRZ R5 8        // Branch if r5 is zero by 8 instructions
LDI R5 7        // Load immediate 7 into r5
SHL R5 R5       // Shift left (r5 = 14)
ADI R5 R5 7     // Add 7 (r5 = 21)
ADI R5 R5 2     // Add 2 (r5 = 23)
LD R5 R5        // Load from M[r5] (r5 = M[23] = 0x8000)
LDI R4 0        // Load immediate 0 into r4
BRZ R4 2        // Branch if r4 is zero (always true) by 2 instructions
LDI R5 0        // (Skipped) Load immediate 0 into r5
SHR R6 R6       // Shift right r6 (circular shift)
LDI R4 7        // Load immediate 7 into r4
SHL R4 R4       // Shift left (r4 = 14)
ADI R4 R4 7     // Add 7 (r4 = 21)
ADI R4 R4 1     // Add 1 (r4 = 22)
LD R4 R4        // Load from M[r4] (r4 = M[22] = 0x7FFF)
AND R6 R6 R4    // Bitwise AND (mask out MSB)
OR R6 R6 R5     // Bitwise OR (add MSB if it was 1)
ST R7 R6        // Store r6 in M[r7] - M[31] = seventh shifted key

//This is to load the last four digits of my student ID into memory 1 
LDI R0 6        // Load immediate 6 into r0
SHL R0 R0       // Shift left (r0 = 12)
SHL R0 R0       // Shift left (r0 = 24)
SHL R0 R0       // Shift left (r0 = 48)
SHL R0 R0       // Shift left (r0 = 96)
ADI R0 R0 7     // Add 7 (r0 = 103)
ADI R0 R0 1     // Add 1 (r0 = 104)
SHL R0 R0       // Shift left (r0 = 208)
SHL R0 R0       // Shift left (r0 = 416)
SHL R0 R0       // Shift left (r0 = 832)
SHL R0 R0       // Shift left (r0 = 1664)
ADI R0 R0 6     // Add 6 (r0 = 1670)
SHL R0 R0       // Shift left (r0 = 3340)
SHL R0 R0       // Shift left (r0 = 6680)
SHL R0 R0       // Shift left (r0 = 13360)
SHL R0 R0       // Shift left (r0 = 26720)
ADI R0 R0 1     // Add 1 (r0 = 26721) - BCD representation of student ID
LDI R1 0        // Load immediate 0 into r1
ST R1 R0        // Store r0 in M[r1] - M[0] = student ID (satisfies requirement in table 2.2)

// Main encryption function
// Initialize variables for encryption
LDI R0 2        // Load immediate 2 into r0
LD R3 R0        // Load from M[r0] (r3 = M[2] = string length)
LDI R0 1        // Load immediate 1 into r0
LD R0 R0        // Load from M[r0] (r0 = M[1] = pointer to input array)

// Main encryption loop entry point
// Setup for first Feistel round
LDI R1 7        // Load immediate 7 into r1
SHL R1 R1       // Shift left (r1 = 14)
ADI R1 R1 7     // Add 7 (r1 = 21)
ADI R1 R1 3     // Add 3 (r1 = 24) - address of key
LDI R2 7        // Load immediate 7 into r2
ADI R2 R2 1     // Add 1 (r2 = 8) - counter for 8 rounds
ADI R0 R0 1     // Increment r0 to point to next block
LD R4 R0        // Load data block from M[r0]
LDI R6 0        // Load immediate 0 into r6

BRZ R6 2        // Branch if r6 is zero (always true for first iteration) by 2 instructions
MOVA R4 R7      // (Skipped first time) Move r7 to r4 for next round

// Split data block into left and right halves
LDI R7 7        // Load immediate 7 into r7
ADI R7 R7 4     // Add 4 (r7 = 11)
LD R6 R7        // Load from M[r7] (r6 = M[11] = 0x00FF)
AND R5 R4 R6    // Bitwise AND r4 with r6 (r5 = right half of block)
ADI R7 R7 1     // Increment r7 to 12
LD R6 R7        // Load from M[r7] (r6 = M[12] = 0xFF00)
AND R4 R4 R6    // Bitwise AND r4 with r6 (r4 = left half of block)

// Store left side in memory location 21
LDI R6 7        // Load immediate 7 into r6
SHL R6 R6       // Shift left (r6 = 14)
ADI R6 R6 7     // Add 7 (r6 = 21)
ST R6 R4        // Store r4 in M[r6] - M[21] = left half

// Store right side in memory location 7 for later use
LDI R6 7        // Load immediate 7 into r6
ST R6 R5        // Store r5 in M[r6] - M[7] = right half

// Feistel round function: XOR with key
// This implements the first step of the Round Function from Figure 1.1
LD R7 R1        // Load from M[r1] (r7 = key)
LDI R4 7        // Load immediate 7 into r4
ADI R4 R4 3     // Add 3 (r4 = 10)
LD R4 R4        // Load from M[r4] (r4 = M[10] = 0xFF0)
AND R7 R7 R4    // Extract middle 8 bits of key (as shown in Figure 1.2)
SHR R7 R7       // Shift right 4 times to position key bits correctly
SHR R7 R7
SHR R7 R7
SHR R7 R7
XOR R5 R5 R7    // XOR right half with key bits

// Permutation step of round function
// This implements the permutation shown in Figure 1.3
// Maps bits as shown: Input [7,6,5,4,3,2,1,0] -> Output [0,4,3,6,2,7,5,1]
LDI R7 0        // Initialize result to 0

// Check and permute bit 7 -> bit 7 goes to position 2
LDI R6 7        // Load immediate 7 into r6
ADI R6 R6 6     // Add 6 (r6 = 13)
LD R4 R6        // Load from M[r6] (r4 = M[13] = 0x0080)
AND R4 R5 R4    // Check if bit 7 is set
BRZ R4 7        // Branch if bit 7 is not set by 7 instructions
SHR R4 R4       // Shift right 5 times (bit 7 -> bit 2)
SHR R4 R4
SHR R4 R4
SHR R4 R4
SHR R4 R4
OR R7 R4 R7     // OR result with the permuted bit

// Check and permute bit 6 -> bit 6 goes to position 4
ADI R6 R6 1     // Increment r6 to 14
LD R4 R6        // Load from M[r6] (r4 = M[14] = 0x0040)
AND R4 R5 R4    // Check if bit 6 is set
BRZ R4 4        // Branch if bit 6 is not set by 4 instructions
SHR R4 R4       // Shift right twice (bit 6 -> bit 4)
SHR R4 R4
OR R7 R4 R7     // OR result with the permuted bit

// Check and permute bit 5 -> bit 5 goes to position 1
ADI R6 R6 1     // Increment r6 to 15
LD R4 R6        // Load from M[r6] (r4 = M[15] = 0x0020)
AND R4 R5 R4    // Check if bit 5 is set
BRZ R4 6        // Branch if bit 5 is not set by 6 instructions
SHR R4 R4       // Shift right 4 times (bit 5 -> bit 1)
SHR R4 R4
SHR R4 R4
SHR R4 R4
OR R7 R4 R7     // OR result with the permuted bit

// Check and permute bit 4 -> bit 4 goes to position 6
ADI R6 R6 1     // Increment r6 to 16
LD R4 R6        // Load from M[r6] (r4 = M[16] = 0x0010)
AND R4 R5 R4    // Check if bit 4 is set
BRZ R4 4        // Branch if bit 4 is not set by 4 instructions
SHL R4 R4       // Shift left twice (bit 4 -> bit 6)
SHL R4 R4
OR R7 R4 R7     // OR result with the permuted bit

// Check and permute bit 3 -> bit 3 goes to position 5
LDI R4 7        // Load immediate 7 into r4
ADI R4 R4 1     // Add 1 (r4 = 8) - bitmask for bit 3 (0x0008)
AND R4 R5 R4    // Check if bit 3 is set
BRZ R4 4        // Branch if bit 3 is not set by 4 instructions
SHL R4 R4       // Shift left twice (bit 3 -> bit 5)
SHL R4 R4
OR R7 R4 R7     // OR result with the permuted bit

// Check and permute bit 2 -> bit 2 goes to position 3
LDI R4 4        // Load immediate 4 into r4 (bitmask for bit 2 - 0x0004)
AND R4 R5 R4    // Check if bit 2 is set
BRZ R4 3        // Branch if bit 2 is not set by 3 instructions
SHL R4 R4       // Shift left (bit 2 -> bit 3)
OR R7 R4 R7     // OR result with the permuted bit

// Check and permute bit 1 -> bit 1 goes to position 0
LDI R4 2        // Load immediate 2 into r4 (bitmask for bit 1 - 0x0002)
AND R4 R5 R4    // Check if bit 1 is set
BRZ R4 3        // Branch if bit 1 is not set by 3 instructions
SHR R4 R4       // Shift right (bit 1 -> bit 0)
OR R7 R4 R7     // OR result with the permuted bit

// Check and permute bit 0 -> bit 0 goes to position 7
LDI R4 1        // Load immediate 1 into r4 (bitmask for bit 0 - 0x0001)
AND R4 R5 R4    // Check if bit 0 is set
BRZ R4 9        // Branch if bit 0 is not set by 9 instructions
SHL R4 R4       // Shift left 7 times (bit 0 -> bit 7)
SHL R4 R4
SHL R4 R4
SHL R4 R4
SHL R4 R4
SHL R4 R4
SHL R4 R4
OR R7 R4 R7     // OR result with the permuted bit

// XOR with left side (R7 has newest right side and r4 contains left side)
// This implements the XOR step shown in Figure 1.1 (⊕ symbol)
LDI R6 7        // Load immediate 7 into r6
SHL R6 R6       // Shift left (r6 = 14)
ADI R6 R6 7     // Add 7 (r6 = 21)
LD R4 R6        // Load from M[r6] (r4 = M[21] = left half)
SHR R4 R4       // Shift right 8 times to get the correct byte
SHR R4 R4
SHR R4 R4
SHR R4 R4
SHR R4 R4
SHR R4 R4
SHR R4 R4
SHR R4 R4
LDI R6 7        // Load immediate 7 into r6
ADI R6 R6 4     // Add 4 (r6 = 11)
LD R6 R6        // Load from M[r6] (r6 = M[11] = 0x00FF)
AND R4 R4 R6    // Mask to get only the lower byte
XOR R7 R7 R4    // XOR with left half to get new right half

// Get final result from round of encryption
// Original right half becomes new left half (Figure 1.1 shows R0 becoming L1)
LDI R6 7        // Load immediate 7 into r6
LD R4 R6        // Load from M[r6] (r4 = M[7] = original right half)
SHL R4 R4       // Shift left 8 times to position in upper byte
SHL R4 R4
SHL R4 R4
SHL R4 R4
SHL R4 R4
SHL R4 R4
SHL R4 R4
SHL R4 R4
OR R7 R4 R7     // Combine with new right half (R7 now contains full output of round)

// Here will change key by doing a circular shift for next round
ADI R1 R1 1     // Increment key pointer to next round key
DEC R2 R2       // Decrement round counter (8 counter gets decremented)
BRZ R2 6        // If 8 rounds complete, branch forward by 6 instructions
LDI R6 7        // Load immediate 7 into r6
SHL R6 R6       // Shift left (r6 = 14)
ADI R6 R6 3     // Add 3 (r6 = 17)
LD R6 R6        // Load from M[r6] (r6 = M[17] = jump address)
JMP R6          // Jump back to continue next round (loop back to encryption process)

// Final swap after 8 rounds (required by Feistel cipher as in Figure 1.1)
LDI R5 5        // Load immediate 5 into r5
SHL R5 R5       // Shift left (r5 = 10)
ADI R5 R5 1     // Add 1 (r5 = 11)
LD R6 R5        // Load from M[r5] (r6 = M[11] = 0x00FF)
ADI R5 R5 1     // Increment r5 to 12
LD R5 R5        // Load from M[r5] (r5 = M[12] = 0xFF00)
AND R5 R7 R5    // Extract upper byte
SHR R5 R5       // Shift right 8 times to move to lower byte
SHR R5 R5
SHR R5 R5
SHR R5 R5
SHR R5 R5
SHR R5 R5
SHR R5 R5
SHR R5 R5
AND R7 R7 R6    // Extract lower byte
SHL R7 R7       // Shift left 8 times to move to upper byte
SHL R7 R7
SHL R7 R7
SHL R7 R7
SHL R7 R7
SHL R7 R7
SHL R7 R7
SHL R7 R7
AND R5 R5 R6    // Ensure lower byte is clean
OR R7 R5 R7     // Combine swapped bytes (final result of encryption)

// Store encrypted result in memory
// This satisfies the requirement to store results in memory locations 0x03-0x06
LDI R5 7        // Load immediate 7 into r5
ADI R5 R5 2     // Add 2 (r5 = 9)
LD R6 R5        // Load from M[r5] (r6 = M[9] = output memory location pointer, initially 3)
ST R6 R7        // Store result in output memory location
ADI R6 R6 1     // Increment output pointer to 4
ST R5 R6        // Update pointer in memory (M[9] = next output location)

// Check if we need to process more blocks
DEC R3 R3       // Decrement string length counter
DEC R3 R3       // Decrement again (this is likely counting characters, 2 per block)
DEC R3 R3       // Decrement again
BRZ R3 14       // If string length is zero, branch forward by 14 instructions (done)
BRN R3 13       // If string length is negative, branch forward by 13 instructions (done)

// Jump back to process next data block
LDI R6 7        // Load immediate 7 into r6
ADI R6 R6 1     // Add 1 (r6 = 8)
SHL R6 R6       // Shift left (r6 = 16)
SHL R6 R6       // Shift left (r6 = 32)
SHL R6 R6       // Shift left (r6 = 64)
SHL R6 R6       // Shift left (r6 = 128)
SHL R6 R6       // Shift left (r6 = 256)
ADI R6 R6 7     // Add 7 (r6 = 263)
ADI R6 R6 7     // Add 7 (r6 = 270)
ADI R6 R6 7     // Add 7 (r6 = 277)
ADI R6 R6 6     // Add 6 (r6 = 283)
JMP R6          // Jump back to process next block

// Return to validation code when encryption is complete
ldi r0, 4       // Load immediate 4 into r0
jmp r0          // Jump to validation sequence at address 4 to display results